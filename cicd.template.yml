Parameters:
  GithubToken:
    Type: String
    NoEcho: true
    Description: OAuth token for the Github organization.  Needs read/write access to repos and repo hooks

  GithubOwner:
    Type: String
    Description: Owner of the github repository to track

  GithubRepo:
    Type: String
    Description: Name of the github repository to track

  GithubBranch:
    Type: String
    Description: Name of the github branch to track

Resources:
  HostedZone:
    Type: Custom::HostedZone
    Properties:
      ServiceToken: !ImportValue cfn-resources:HostedZoneLambdaArn
      Name: remnisense.com
      DelegationSetId: !ImportValue cfn-dns:DelegationSetId
      HostedZoneConfig:
        Comment: Hosted zone for remnisense

  Certificate:
    Type: Custom::Certificate
    Properties:
      ServiceToken: !ImportValue cfn-resources:CertificateLambdaArn
      DomainName: remnisense.com
      HostedZoneId: !Ref HostedZone
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - dev.remnisense.com 

  ListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      ListenerArn: !ImportValue cfn-core:HttpsListenerArn
      Certificates:
        - !Ref Certificate

  DevDnsRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets:
        - Name: dev.remnisense.com
          Type: A
          AliasTarget:
            HostedZoneId: !ImportValue cfn-core:LoadBalancerCanonicalHostedZoneId
            DNSName: !ImportValue cfn-core:LoadBalancerDnsName
        - Name: dev.remnisense.com
          Type: AAAA
          AliasTarget:
            HostedZoneId: !ImportValue cfn-core:LoadBalancerCanonicalHostedZoneId
            DNSName: !ImportValue cfn-core:LoadBalancerDnsName

  ProdDnsRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZone
      RecordSets: 
        - Name: remnisense.com
          Type: A
          AliasTarget:
            HostedZoneId: !ImportValue cfn-core:LoadBalancerCanonicalHostedZoneId
            DNSName: !ImportValue cfn-core:LoadBalancerDnsName
        - Name: remnisense.com
          Type: AAAA
          AliasTarget:
            HostedZoneId: !ImportValue cfn-core:LoadBalancerCanonicalHostedZoneId
            DNSName: !ImportValue cfn-core:LoadBalancerDnsName
      
  ArtifactStore:
    Type: AWS::S3::Bucket

  ArtifactStorePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactStore
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:*Object
            Resource:
              - !Sub arn:aws:s3:::${ArtifactStore}
              - !Sub arn:aws:s3:::${ArtifactStore}/*
            Principal:
              AWS:
                - !Ref AWS::AccountId
                - !ImportValue cfn-metadata:DevAgentRoleArn
                - !ImportValue cfn-metadata:ProdAgentRoleArn
  
  DockerRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:ListImages
            Principal:
              AWS:
                - !Ref AWS::AccountId
                - !ImportValue cfn-metadata:DevAccountId
                - !ImportValue cfn-metadata:ProdAccountId

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-build
      ServiceRole: !ImportValue cfn-utilities:BuilderRoleArn
      EncryptionKey: !ImportValue cfn-utilities:ArtifactKeyArn
      Environment:
        PrivilegedMode: true
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: ARTIFACT_STORE
            Value: !Ref ArtifactStore
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerRepo}
        Type: LINUX_CONTAINER
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE

  Webhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GithubToken
      Filters:
        - JsonPath: $.ref
          MatchEquals: "refs/heads/{Branch}"
      TargetPipeline: !Ref Pipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AWS::StackName}-pipeline 
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStore
        EncryptionKey: 
          Id: !ImportValue cfn-utilities:ArtifactKeyArn
          Type: KMS
      RoleArn: !ImportValue cfn-utilities:MasterRoleArn
      RestartExecutionOnUpdate: true
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Provider: GitHub
                Owner: ThirdParty
                Version: 1
              OutputArtifacts:
                - Name: sourceCode
              Configuration:
                Owner: !Ref GithubOwner
                Repo: !Ref GithubRepo
                Branch: !Ref GithubBranch
                OAuthToken: !Ref GithubToken
                PollForSourceChanges: false
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Provider: CodeBuild
                Owner: AWS
                Version: 1
              InputArtifacts:
                - Name: sourceCode
              OutputArtifacts:
                - Name: buildResults
              Configuration:
                ProjectName: !Ref BuildProject
        - Name: Dev
          Actions:
            - Name: Deploy
              RoleArn: !ImportValue cfn-metadata:DevAgentRoleArn
              ActionTypeId:
                Category: Deploy
                Provider: CloudFormation
                Owner: AWS
                Version: 1
              InputArtifacts:
                - Name: buildResults
              Configuration:
                StackName: remnisense
                TemplatePath: buildResults::remnisense.template.yml
                TemplateConfiguration: buildResults::remnisense.dev.config.json
                ActionMode: CREATE_UPDATE
                RoleArn: !ImportValue cfn-metadata:DevAgentRoleArn
                Capabilities: CAPABILITY_IAM
        - Name: Prod
          Actions:
            - Name: Approve
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: 1
              InputArtifacts: []
              OutputArtifacts: []
              RunOrder: 1
            - Name: Prod
              RunOrder: 2
              RoleArn: !ImportValue cfn-metadata:ProdAgentRoleArn
              ActionTypeId:
                Category: Deploy
                Provider: CloudFormation
                Owner: AWS
                Version: 1
              InputArtifacts:
                - Name: buildResults
              Configuration:
                StackName: remnisense
                TemplatePath: buildResults::remnisense.template.yml
                TemplateConfiguration: buildResults::remnisense.prod.config.json
                ActionMode: CREATE_UPDATE
                RoleArn: !ImportValue cfn-metadata:ProdAgentRoleArn
                Capabilities: CAPABILITY_IAM