Parameters:
  Image:
    Type: String
    Description: Location of the docker image to use for the Remnisense server
  
  DomainName:
    Type: String
    Description: Domain name to use for this deployment of Remnisense

  DBName:
    Type: String
    Description: Database name

  DBUser:
    Type: String
    Description: Username to use to connect to the database with

  DBPassword:
    Type: String
    Description: Encrypted password to use to connect to the database with

Resources:
  DecryptedDBPassword:
    Type: Custom::Secret
    Properties:
      ServiceToken: !Sub 
        - arn:aws:lambda:${AWS::Region}:${MasterAccountId}:function:Secret
        - MasterAccountId: !ImportValue cfn-utilities:MasterAccountId
      Ciphertext: !Ref DBPassword

  Database:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora
      EngineMode: serverless
      EngineVersion: 5.6.10a
      DatabaseName: !Ref DBName
      DBClusterParameterGroupName: default.aurora5.6
      MasterUsername: !Ref DBUser
      MasterUserPassword: !GetAtt DecryptedDBPassword.Plaintext
      DBSubnetGroupName: !ImportValue cfn-utilities:DBSubnetGroupName
      VpcSecurityGroupIds:
        - !ImportValue cfn-utilities:DatabaseSecurityGroupId
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 2
        MinCapacity: 1
        SecondsUntilAutoPause: 300

  ServerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue cfn-utilities:HttpListenerArn
      Priority: 4
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref DomainName
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /api*

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      VpcId: !ImportValue cfn-utilities:VpcId
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /api
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName
  
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split
            - ","
            - !ImportValue cfn-utilities:SubnetIds
          SecurityGroups:
            - !ImportValue cfn-utilities:WebSecurityGroupId
            - !ImportValue cfn-utilities:DatabaseSecurityGroupId
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: remnisense-server
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 1
        MaximumPercent: 200

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: remnisense-server
          Essential: true
          Image: !Ref Image
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName
          Environment:
            - Name: PORT
              Value: 80
            - Name: BASE_PATH
              Value: /api
            - Name: DB_HOST
              Value: !GetAtt Database.Endpoint.Address
            - Name: DB_NAME
              Value: !Ref DBName
            - Name: DB_USER
              Value: !Ref DBUser
            - Name: ENCRYPTED_DB_PASSWORD
              Value: !Ref DBPassword

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - !ImportValue cfn-utilities:SecretsKeyDecryptPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
